import streamlit as st
import pandas as pd
import re
from datetime import datetime, timedelta
from fpdf import FPDF
import hashlib
import pytz

# === Streamlit Page Config & Theming ===
st.set_page_config(
    page_title="MAYFLY GENERATOR",
    page_icon="‚úàÔ∏è",
    layout="centered"
)

# Inject custom CSS for white background, light‚Äêblue text, uppercase labels, centering, Mylus Modern font
st.markdown("""
<style>
  /* App background, text color, font, uppercase */
  [data-testid="stAppViewContainer"],
  [data-testid="stSidebar"] {
    background-color: #FFFFFF !important;
    color: #69c9ff !important;
    font-family: "Mylus Modern", sans-serif;
    text-transform: uppercase;
  }
  /* Center the main content */
  .block-container {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  /* Inputs and buttons uppercase */
  .stTextInput label,
  .stDateInput label,
  .stSelectbox label,
  .stRadio label,
  .stTextArea label,
  .stButton>button {
    text-transform: uppercase !important;
  }
  /* Buttons background light blue, text white */
  .stButton>button {
    background-color: #69c9ff !important;
    color: #FFFFFF !important;
  }
</style>
""", unsafe_allow_html=True)

# === Secure Password Protection ===
def get_hashed_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

CORRECT_PASSWORD_HASH = get_hashed_password("MayFly2025!")

def check_password():
    def password_entered():
        entered_hash = get_hashed_password(st.session_state["password"])
        st.session_state["password_correct"] = (entered_hash == CORRECT_PASSWORD_HASH)
        if st.session_state["password_correct"]:
            del st.session_state["password"]

    if "password_correct" not in st.session_state:
        st.text_input("ENTER PASSWORD:", type="password", on_change=password_entered, key="password")
        return False
    if not st.session_state["password_correct"]:
        st.text_input("ENTER PASSWORD:", type="password", on_change=password_entered, key="password")
        st.error("üòï PASSWORD INCORRECT. TRY AGAIN.")
        return False
    return True

if not check_password():
    st.stop()

# === Flight Lists ===
DOMESTIC_ROUTES = [
    "LHRABZ","LHRINV","LHRGLA","LHREDI","LHRBHD",
    "LHRNCL","LHRJER","LHRMAN","LHRBFS","LHRDUB"
]

T3_FLIGHTS = [
    "BA159","BA227","BA247","BA253","BA289","BA336","BA340","BA350","BA366","BA368","BA370",
    "BA372","BA374","BA376","BA378","BA380","BA382","BA386","BA408","BA410","BA416","BA418",
    "BA422","BA490","BA492","BA498","BA532","BA608","BA616","BA618","BA690","BA696","BA700",
    "BA702","BA704","BA706","BA760","BA762","BA764","BA766","BA770","BA790","BA792","BA802",
    "BA806","BA848","BA852","BA854","BA856","BA858","BA860","BA862","BA864","BA866","BA868",
    "BA870","BA872","BA874","BA882","BA884","BA886","BA890","BA892","BA896","BA918","BA920"
]

LGW_FLIGHTS = [
    'BA2640','BA2704','BA2670','BA2740','BA2624','BA2748','BA2676','BA2758','BA2784','BA2610',
    'BA2606','BA2574','BA2810','BA2666','BA2614','BA2716','BA2808','BA2660','BA2680','BA2720',
    'BA2642','BA2520','BA2161','BA2037','BA2754','BA2239','BA1480','BA2159','BA2167','BA2780',
    'BA2203','BA2702','BA2756','BA2263','BA2612','BA2794','BA2039','BA2812','BA2752','BA2273',
    'BA2602','BA2682','BA2662','BA2608','BA2644','BA2650','BA2576','BA2590','BA2722','BA2816',
    'BA2596','BA2656','BA2668','BA2672','BA2572'
]

# === PDF Styling ===
BA_BLUE   = (0, 32, 91)
GREEN     = (198, 239, 206)   # <70% LF
AMBER     = (255, 229, 153)   # 70‚Äì90% LF
LIGHT_RED = (246,  73,  54)   # warm red #f64936

class BA_PDF(FPDF):
    def __init__(self, date_str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.date_str = date_str

    def header(self):
        self.set_fill_color(*BA_BLUE)
        self.set_text_color(255,255,255)
        self.set_font('Arial','B',14)
        self.cell(0,10,f'MAYFLY {self.date_str} ‚Äì BRITISH AIRWAYS',ln=True,align='C',fill=True)
        self.ln(5)
        self.set_font('Arial','I',8)
        self.multi_cell(0,5,
            "PLEASE NOTE, CONFORMANCE TIMES BELOW ARE FOR LANDSIDE ONLY. "
            "FOR CONNECTIONS, ADD 5 MINUTES.",
            align='C'
        )
        self.ln(3)

    def footer(self):
        self.set_y(-12)
        self.set_font('Arial','I',8)
        self.set_text_color(100)
        self.cell(0,8,'CONFIDENTIAL ¬© 2025 | GENERATED BY BRITISH AIRWAYS',0,0,'C')

    def flight_table(self, data):
        headers = ['FLIGHT NO','AIRCRAFT','ROUTE','ETD','CONFORMANCE','LOAD']
        widths  = [30,25,30,30,30,20]

        # Header row
        self.set_font('Arial','B',8.5)
        self.set_fill_color(*BA_BLUE)
        self.set_text_color(255,255,255)
        for i,h in enumerate(headers):
            self.cell(widths[i],6,h,1,0,'C',True)
        self.ln()

        # Data rows
        self.set_font('Arial','',7.5)
        self.set_text_color(0)
        for _,row in data.iterrows():
            for i,key in enumerate([
                "Flight Number","Aircraft Type","Route",
                "ETD","Conformance Time","Load Factor"
            ]):
                fill=False
                if key=="Load Factor":
                    lf=int(row["Load Factor"].rstrip('%'))
                    if lf<70:
                        self.set_fill_color(*GREEN); fill=True
                    elif lf<=90:
                        self.set_fill_color(*AMBER); fill=True
                    else:
                        self.set_fill_color(*LIGHT_RED); fill=True
                self.cell(widths[i],6,str(row[key]).upper(),1,0,'C',fill)
            self.ln()

def parse_txt(content, filter_type):
    lines=content.strip().split('\n')
    flights=[]; utc=pytz.utc; i=0
    while i<len(lines):
        if lines[i].startswith("BA"):
            try:
                fn=lines[i].strip()
                ac=lines[i+2].strip()
                rt=re.sub(r"\s+","",lines[i+3].strip().upper())
                m1=re.search(r"STD: \d{2} \w+ - (\d{2}:\d{2})z",lines[i+4])
                m2=re.search(r"(\d{1,3})%Status",lines[i+8])
                if m1 and m2:
                    t=m1.group(1); lf=int(m2.group(1))
                    dt=datetime.strptime(t,"%H:%M"); dt=utc.localize(dt)
                    etd=(dt+timedelta(hours=1)).strftime("%H:%M")
                    cnf=(dt+timedelta(minutes=25)).strftime("%H:%M")
                    flights.append({
                        "Flight Number":fn,"Aircraft Type":ac,"Route":rt,
                        "ETD":etd,"ETD Local":dt.strftime("%H:%M"),
                        "Conformance Time":cnf,
                        "Load Factor":f"{lf}%","Load Factor Numeric":lf
                    })
            except: pass
        i+=1
    df=pd.DataFrame(flights)
    if not df.empty:
        opt=filter_type.upper()
        if opt=="FLIGHTS ABOVE 90%": df=df[df["Load Factor Numeric"]>=90]
        elif opt=="FLIGHTS ABOVE 70%": df=df[df["Load Factor Numeric"]>=70]
        elif opt=="DOMESTIC":          df=df[df["Route"].isin(DOMESTIC_ROUTES)]
        df=df.sort_values("ETD Local")
    return df

# === UI Inputs ===
selected_date = st.date_input("SELECT MAYFLY DATE", datetime.today(), format="DD/MM/YYYY")
date_str      = selected_date.strftime("%d %B")

station = st.selectbox("SELECT STATION", ["ALL STATIONS","T3","T5","LGW"])
filter_option = st.radio("CHOOSE FILTER",
    ["ALL FLIGHTS","FLIGHTS ABOVE 90%","FLIGHTS ABOVE 70%","DOMESTIC"]
)

st.markdown("### PASTE YOUR MAYFLY DATA BELOW")
text_input = st.text_area("PASTE CONTENT FROM OPS DASHBOARD HERE", height=200)

if text_input:
    df=parse_txt(text_input, filter_option)
    if station=="T3": df=df[df["Flight Number"].isin(T3_FLIGHTS)]
    elif station=="T5":df=df[~df["Flight Number"].isin(T3_FLIGHTS)]
    elif station=="LGW":df=df[df["Flight Number"].isin(LGW_FLIGHTS)]

    if not df.empty:
        st.success(f"PROCESSED {len(df)} FLIGHTS ({filter_option}, {station}).")
        pdf=BA_PDF(date_str,orientation='P',unit='mm',format='A4')
        pdf.set_auto_page_break(True,10)
        pdf.add_page(); pdf.flight_table(df)
        path="/tmp/BA_MayFly_Output.pdf"; pdf.output(path)
        with open(path,"rb") as f:
            st.download_button("DOWNLOAD MAYFLY PDF",f,
                file_name=f"BA_MAYFLY_{date_str.replace(' ','_')}.PDF")
        st.info("CONFIDENTIAL ¬© 2025 | GENERATED BY BRITISH AIRWAYS")
    else:
        st.error("NO VALID FLIGHTS FOUND WITH CURRENT FILTER.")
